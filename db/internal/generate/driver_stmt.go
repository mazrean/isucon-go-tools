// Code generated by internal/tools/interface-wrapper.go; DO NOT EDIT.
package isudbgen

import "database/sql/driver"

type LimitOptionalStmtWrappedType = interface {
	driver.Stmt
	driver.ColumnConverter
	driver.NamedValueChecker
	driver.StmtExecContext
	driver.StmtQueryContext
}

func LimitOptionalStmt(v driver.Stmt, wrapper func(driver.Stmt) LimitOptionalStmtWrappedType) driver.Stmt {
	wrapped := wrapper(v)
	var i uint64
	const (
		i0 = 1 << iota
		i1
		i2
		i3
	)
	if _, ok := v.(driver.ColumnConverter); ok {
		i |= i0
	}
	if _, ok := v.(driver.NamedValueChecker); ok {
		i |= i1
	}
	if _, ok := v.(driver.StmtExecContext); ok {
		i |= i2
	}
	if _, ok := v.(driver.StmtQueryContext); ok {
		i |= i3
	}
	switch i {
	case 0:
		return struct {
			driver.Stmt
		}{wrapped}
	case 1:
		return struct {
			driver.Stmt
			driver.ColumnConverter
			driver.NamedValueChecker
			driver.StmtExecContext
			driver.StmtQueryContext
		}{wrapped, wrapped, wrapped, wrapped, wrapped}
	case 2:
		return struct {
			driver.Stmt
		}{wrapped}
	case 3:
		return struct {
			driver.Stmt
			driver.ColumnConverter
			driver.NamedValueChecker
			driver.StmtExecContext
			driver.StmtQueryContext
		}{wrapped, wrapped, wrapped, wrapped, wrapped}
	case 4:
		return struct {
			driver.Stmt
		}{wrapped}
	case 5:
		return struct {
			driver.Stmt
			driver.ColumnConverter
			driver.NamedValueChecker
			driver.StmtExecContext
			driver.StmtQueryContext
		}{wrapped, wrapped, wrapped, wrapped, wrapped}
	case 6:
		return struct {
			driver.Stmt
		}{wrapped}
	case 7:
		return struct {
			driver.Stmt
			driver.ColumnConverter
			driver.NamedValueChecker
			driver.StmtExecContext
			driver.StmtQueryContext
		}{wrapped, wrapped, wrapped, wrapped, wrapped}
	case 8:
		return struct {
			driver.Stmt
		}{wrapped}
	case 9:
		return struct {
			driver.Stmt
			driver.ColumnConverter
			driver.NamedValueChecker
			driver.StmtExecContext
			driver.StmtQueryContext
		}{wrapped, wrapped, wrapped, wrapped, wrapped}
	case 10:
		return struct {
			driver.Stmt
		}{wrapped}
	case 11:
		return struct {
			driver.Stmt
			driver.ColumnConverter
			driver.NamedValueChecker
			driver.StmtExecContext
			driver.StmtQueryContext
		}{wrapped, wrapped, wrapped, wrapped, wrapped}
	case 12:
		return struct {
			driver.Stmt
		}{wrapped}
	case 13:
		return struct {
			driver.Stmt
			driver.ColumnConverter
			driver.NamedValueChecker
			driver.StmtExecContext
			driver.StmtQueryContext
		}{wrapped, wrapped, wrapped, wrapped, wrapped}
	case 14:
		return struct {
			driver.Stmt
		}{wrapped}
	case 15:
		return struct {
			driver.Stmt
			driver.ColumnConverter
			driver.NamedValueChecker
			driver.StmtExecContext
			driver.StmtQueryContext
		}{wrapped, wrapped, wrapped, wrapped, wrapped}
	}
	return v
}
